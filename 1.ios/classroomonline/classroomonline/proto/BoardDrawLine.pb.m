// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "BoardDrawLine.pb.h"
// @@protoc_insertion_point(imports)

@implementation BoardDrawLineRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [BoardDrawLineRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [MetroPointXyRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface BoardDrawLine ()
@property SInt32 lineid;
@property (strong) NSMutableArray * pointsArray;
@property SInt32 classid;
@end

@implementation BoardDrawLine

- (BOOL) hasLineid {
  return !!hasLineid_;
}
- (void) setHasLineid:(BOOL) _value_ {
  hasLineid_ = !!_value_;
}
@synthesize lineid;
@synthesize pointsArray;
@dynamic points;
- (BOOL) hasClassid {
  return !!hasClassid_;
}
- (void) setHasClassid:(BOOL) _value_ {
  hasClassid_ = !!_value_;
}
@synthesize classid;
- (instancetype) init {
  if ((self = [super init])) {
    self.lineid = 0;
    self.classid = 0;
  }
  return self;
}
static BoardDrawLine* defaultBoardDrawLineInstance = nil;
+ (void) initialize {
  if (self == [BoardDrawLine class]) {
    defaultBoardDrawLineInstance = [[BoardDrawLine alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultBoardDrawLineInstance;
}
- (instancetype) defaultInstance {
  return defaultBoardDrawLineInstance;
}
- (NSArray *)points {
  return pointsArray;
}
- (MetroPointXY*)pointsAtIndex:(NSUInteger)index {
  return [pointsArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  __block BOOL isInitpoints = YES;
   [self.points enumerateObjectsUsingBlock:^(MetroPointXY *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitpoints = NO;
      *stop = YES;
    }
  }];
  if (!isInitpoints) return isInitpoints;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLineid) {
    [output writeInt32:1 value:self.lineid];
  }
  [self.pointsArray enumerateObjectsUsingBlock:^(MetroPointXY *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  if (self.hasClassid) {
    [output writeInt32:3 value:self.classid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLineid) {
    size_ += computeInt32Size(1, self.lineid);
  }
  [self.pointsArray enumerateObjectsUsingBlock:^(MetroPointXY *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  if (self.hasClassid) {
    size_ += computeInt32Size(3, self.classid);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (BoardDrawLine*) parseFromData:(NSData*) data {
  return (BoardDrawLine*)[[[BoardDrawLine builder] mergeFromData:data] build];
}
+ (BoardDrawLine*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BoardDrawLine*)[[[BoardDrawLine builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (BoardDrawLine*) parseFromInputStream:(NSInputStream*) input {
  return (BoardDrawLine*)[[[BoardDrawLine builder] mergeFromInputStream:input] build];
}
+ (BoardDrawLine*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BoardDrawLine*)[[[BoardDrawLine builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BoardDrawLine*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (BoardDrawLine*)[[[BoardDrawLine builder] mergeFromCodedInputStream:input] build];
}
+ (BoardDrawLine*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (BoardDrawLine*)[[[BoardDrawLine builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (BoardDrawLineBuilder*) builder {
  return [[BoardDrawLineBuilder alloc] init];
}
+ (BoardDrawLineBuilder*) builderWithPrototype:(BoardDrawLine*) prototype {
  return [[BoardDrawLine builder] mergeFrom:prototype];
}
- (BoardDrawLineBuilder*) builder {
  return [BoardDrawLine builder];
}
- (BoardDrawLineBuilder*) toBuilder {
  return [BoardDrawLine builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLineid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"lineid", [NSNumber numberWithInteger:self.lineid]];
  }
  [self.pointsArray enumerateObjectsUsingBlock:^(MetroPointXY *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"points"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  if (self.hasClassid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"classid", [NSNumber numberWithInteger:self.classid]];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasLineid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.lineid] forKey: @"lineid"];
  }
  for (MetroPointXY* element in self.pointsArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"points"];
  }
  if (self.hasClassid) {
    [dictionary setObject: [NSNumber numberWithInteger:self.classid] forKey: @"classid"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[BoardDrawLine class]]) {
    return NO;
  }
  BoardDrawLine *otherMessage = other;
  return
      self.hasLineid == otherMessage.hasLineid &&
      (!self.hasLineid || self.lineid == otherMessage.lineid) &&
      [self.pointsArray isEqualToArray:otherMessage.pointsArray] &&
      self.hasClassid == otherMessage.hasClassid &&
      (!self.hasClassid || self.classid == otherMessage.classid) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasLineid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.lineid] hash];
  }
  [self.pointsArray enumerateObjectsUsingBlock:^(MetroPointXY *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  if (self.hasClassid) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.classid] hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface BoardDrawLineBuilder()
@property (strong) BoardDrawLine* resultBoardDrawLine;
@end

@implementation BoardDrawLineBuilder
@synthesize resultBoardDrawLine;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultBoardDrawLine = [[BoardDrawLine alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultBoardDrawLine;
}
- (BoardDrawLineBuilder*) clear {
  self.resultBoardDrawLine = [[BoardDrawLine alloc] init];
  return self;
}
- (BoardDrawLineBuilder*) clone {
  return [BoardDrawLine builderWithPrototype:resultBoardDrawLine];
}
- (BoardDrawLine*) defaultInstance {
  return [BoardDrawLine defaultInstance];
}
- (BoardDrawLine*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (BoardDrawLine*) buildPartial {
  BoardDrawLine* returnMe = resultBoardDrawLine;
  self.resultBoardDrawLine = nil;
  return returnMe;
}
- (BoardDrawLineBuilder*) mergeFrom:(BoardDrawLine*) other {
  if (other == [BoardDrawLine defaultInstance]) {
    return self;
  }
  if (other.hasLineid) {
    [self setLineid:other.lineid];
  }
  if (other.pointsArray.count > 0) {
    if (resultBoardDrawLine.pointsArray == nil) {
      resultBoardDrawLine.pointsArray = [[NSMutableArray alloc] initWithArray:other.pointsArray];
    } else {
      [resultBoardDrawLine.pointsArray addObjectsFromArray:other.pointsArray];
    }
  }
  if (other.hasClassid) {
    [self setClassid:other.classid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (BoardDrawLineBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (BoardDrawLineBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 8: {
        [self setLineid:[input readInt32]];
        break;
      }
      case 18: {
        MetroPointXYBuilder* subBuilder = [MetroPointXY builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addPoints:[subBuilder buildPartial]];
        break;
      }
      case 24: {
        [self setClassid:[input readInt32]];
        break;
      }
    }
  }
}
- (BOOL) hasLineid {
  return resultBoardDrawLine.hasLineid;
}
- (SInt32) lineid {
  return resultBoardDrawLine.lineid;
}
- (BoardDrawLineBuilder*) setLineid:(SInt32) value {
  resultBoardDrawLine.hasLineid = YES;
  resultBoardDrawLine.lineid = value;
  return self;
}
- (BoardDrawLineBuilder*) clearLineid {
  resultBoardDrawLine.hasLineid = NO;
  resultBoardDrawLine.lineid = 0;
  return self;
}
- (NSMutableArray *)points {
  return resultBoardDrawLine.pointsArray;
}
- (MetroPointXY*)pointsAtIndex:(NSUInteger)index {
  return [resultBoardDrawLine pointsAtIndex:index];
}
- (BoardDrawLineBuilder *)addPoints:(MetroPointXY*)value {
  if (resultBoardDrawLine.pointsArray == nil) {
    resultBoardDrawLine.pointsArray = [[NSMutableArray alloc]init];
  }
  [resultBoardDrawLine.pointsArray addObject:value];
  return self;
}
- (BoardDrawLineBuilder *)setPointsArray:(NSArray *)array {
  resultBoardDrawLine.pointsArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (BoardDrawLineBuilder *)clearPoints {
  resultBoardDrawLine.pointsArray = nil;
  return self;
}
- (BOOL) hasClassid {
  return resultBoardDrawLine.hasClassid;
}
- (SInt32) classid {
  return resultBoardDrawLine.classid;
}
- (BoardDrawLineBuilder*) setClassid:(SInt32) value {
  resultBoardDrawLine.hasClassid = YES;
  resultBoardDrawLine.classid = value;
  return self;
}
- (BoardDrawLineBuilder*) clearClassid {
  resultBoardDrawLine.hasClassid = NO;
  resultBoardDrawLine.classid = 0;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
