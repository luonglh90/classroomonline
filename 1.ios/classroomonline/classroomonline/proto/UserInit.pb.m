// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "UserInit.pb.h"
// @@protoc_insertion_point(imports)

@implementation UserInitRoot
static id<PBExtensionField> UserInit_message = nil;
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [UserInitRoot class]) {
    UserInit_message =
      [PBConcreteExtensionField extensionWithType:PBExtensionTypeMessage
                                     extendedClass:[IpcMessage class]
                                       fieldNumber:105
                                      defaultValue:[UserInit defaultInstance]
                               messageOrGroupClass:[UserInit class]
                                        isRepeated:NO
                                          isPacked:NO
                            isMessageSetWireFormat:NO];
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [IpcMessageRoot registerAllExtensions:registry];
    [UserRoot registerAllExtensions:registry];
    [ClassCategoryRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
  [registry addExtension:UserInit_message];
}
@end

@interface UserInit ()
@property (strong) User* userinfo;
@property (strong) NSMutableArray * categoriesArray;
@end

@implementation UserInit

- (BOOL) hasUserinfo {
  return !!hasUserinfo_;
}
- (void) setHasUserinfo:(BOOL) _value_ {
  hasUserinfo_ = !!_value_;
}
@synthesize userinfo;
@synthesize categoriesArray;
@dynamic categories;
- (instancetype) init {
  if ((self = [super init])) {
    self.userinfo = [User defaultInstance];
  }
  return self;
}
+ (id<PBExtensionField>) message {
  return UserInit_message;
}
static UserInit* defaultUserInitInstance = nil;
+ (void) initialize {
  if (self == [UserInit class]) {
    defaultUserInitInstance = [[UserInit alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultUserInitInstance;
}
- (instancetype) defaultInstance {
  return defaultUserInitInstance;
}
- (NSArray *)categories {
  return categoriesArray;
}
- (ClassCategory*)categoriesAtIndex:(NSUInteger)index {
  return [categoriesArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasUserinfo) {
    return NO;
  }
  if (!self.userinfo.isInitialized) {
    return NO;
  }
  __block BOOL isInitcategories = YES;
   [self.categories enumerateObjectsUsingBlock:^(ClassCategory *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitcategories = NO;
      *stop = YES;
    }
  }];
  if (!isInitcategories) return isInitcategories;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUserinfo) {
    [output writeMessage:1 value:self.userinfo];
  }
  [self.categoriesArray enumerateObjectsUsingBlock:^(ClassCategory *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:2 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUserinfo) {
    size_ += computeMessageSize(1, self.userinfo);
  }
  [self.categoriesArray enumerateObjectsUsingBlock:^(ClassCategory *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(2, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (UserInit*) parseFromData:(NSData*) data {
  return (UserInit*)[[[UserInit builder] mergeFromData:data] build];
}
+ (UserInit*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserInit*)[[[UserInit builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (UserInit*) parseFromInputStream:(NSInputStream*) input {
  return (UserInit*)[[[UserInit builder] mergeFromInputStream:input] build];
}
+ (UserInit*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserInit*)[[[UserInit builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserInit*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (UserInit*)[[[UserInit builder] mergeFromCodedInputStream:input] build];
}
+ (UserInit*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (UserInit*)[[[UserInit builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (UserInitBuilder*) builder {
  return [[UserInitBuilder alloc] init];
}
+ (UserInitBuilder*) builderWithPrototype:(UserInit*) prototype {
  return [[UserInit builder] mergeFrom:prototype];
}
- (UserInitBuilder*) builder {
  return [UserInit builder];
}
- (UserInitBuilder*) toBuilder {
  return [UserInit builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUserinfo) {
    [output appendFormat:@"%@%@ {\n", indent, @"userinfo"];
    [self.userinfo writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  [self.categoriesArray enumerateObjectsUsingBlock:^(ClassCategory *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"categories"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUserinfo) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.userinfo storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"userinfo"];
  }
  for (ClassCategory* element in self.categoriesArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"categories"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[UserInit class]]) {
    return NO;
  }
  UserInit *otherMessage = other;
  return
      self.hasUserinfo == otherMessage.hasUserinfo &&
      (!self.hasUserinfo || [self.userinfo isEqual:otherMessage.userinfo]) &&
      [self.categoriesArray isEqualToArray:otherMessage.categoriesArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUserinfo) {
    hashCode = hashCode * 31 + [self.userinfo hash];
  }
  [self.categoriesArray enumerateObjectsUsingBlock:^(ClassCategory *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface UserInitBuilder()
@property (strong) UserInit* resultUserInit;
@end

@implementation UserInitBuilder
@synthesize resultUserInit;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultUserInit = [[UserInit alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultUserInit;
}
- (UserInitBuilder*) clear {
  self.resultUserInit = [[UserInit alloc] init];
  return self;
}
- (UserInitBuilder*) clone {
  return [UserInit builderWithPrototype:resultUserInit];
}
- (UserInit*) defaultInstance {
  return [UserInit defaultInstance];
}
- (UserInit*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (UserInit*) buildPartial {
  UserInit* returnMe = resultUserInit;
  self.resultUserInit = nil;
  return returnMe;
}
- (UserInitBuilder*) mergeFrom:(UserInit*) other {
  if (other == [UserInit defaultInstance]) {
    return self;
  }
  if (other.hasUserinfo) {
    [self mergeUserinfo:other.userinfo];
  }
  if (other.categoriesArray.count > 0) {
    if (resultUserInit.categoriesArray == nil) {
      resultUserInit.categoriesArray = [[NSMutableArray alloc] initWithArray:other.categoriesArray];
    } else {
      [resultUserInit.categoriesArray addObjectsFromArray:other.categoriesArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (UserInitBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (UserInitBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        UserBuilder* subBuilder = [User builder];
        if (self.hasUserinfo) {
          [subBuilder mergeFrom:self.userinfo];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setUserinfo:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        ClassCategoryBuilder* subBuilder = [ClassCategory builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addCategories:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasUserinfo {
  return resultUserInit.hasUserinfo;
}
- (User*) userinfo {
  return resultUserInit.userinfo;
}
- (UserInitBuilder*) setUserinfo:(User*) value {
  resultUserInit.hasUserinfo = YES;
  resultUserInit.userinfo = value;
  return self;
}
- (UserInitBuilder*) setUserinfoBuilder:(UserBuilder*) builderForValue {
  return [self setUserinfo:[builderForValue build]];
}
- (UserInitBuilder*) mergeUserinfo:(User*) value {
  if (resultUserInit.hasUserinfo &&
      resultUserInit.userinfo != [User defaultInstance]) {
    resultUserInit.userinfo =
      [[[User builderWithPrototype:resultUserInit.userinfo] mergeFrom:value] buildPartial];
  } else {
    resultUserInit.userinfo = value;
  }
  resultUserInit.hasUserinfo = YES;
  return self;
}
- (UserInitBuilder*) clearUserinfo {
  resultUserInit.hasUserinfo = NO;
  resultUserInit.userinfo = [User defaultInstance];
  return self;
}
- (NSMutableArray *)categories {
  return resultUserInit.categoriesArray;
}
- (ClassCategory*)categoriesAtIndex:(NSUInteger)index {
  return [resultUserInit categoriesAtIndex:index];
}
- (UserInitBuilder *)addCategories:(ClassCategory*)value {
  if (resultUserInit.categoriesArray == nil) {
    resultUserInit.categoriesArray = [[NSMutableArray alloc]init];
  }
  [resultUserInit.categoriesArray addObject:value];
  return self;
}
- (UserInitBuilder *)setCategoriesArray:(NSArray *)array {
  resultUserInit.categoriesArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (UserInitBuilder *)clearCategories {
  resultUserInit.categoriesArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
