// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Teacher.proto

#ifndef PROTOBUF_Teacher_2eproto__INCLUDED
#define PROTOBUF_Teacher_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "User.pb.h"
// @@protoc_insertion_point(includes)

namespace METRO {
namespace CRO {
namespace MESSAGES {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Teacher_2eproto();
void protobuf_AssignDesc_Teacher_2eproto();
void protobuf_ShutdownFile_Teacher_2eproto();

class Teacher;

// ===================================================================

class Teacher : public ::google::protobuf::Message {
 public:
  Teacher();
  virtual ~Teacher();

  Teacher(const Teacher& from);

  inline Teacher& operator=(const Teacher& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Teacher& default_instance();

  void Swap(Teacher* other);

  // implements Message ----------------------------------------------

  Teacher* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Teacher& from);
  void MergeFrom(const Teacher& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .METRO.CRO.MESSAGES.User userinfo = 1;
  inline bool has_userinfo() const;
  inline void clear_userinfo();
  static const int kUserinfoFieldNumber = 1;
  inline const ::METRO::CRO::MESSAGES::User& userinfo() const;
  inline ::METRO::CRO::MESSAGES::User* mutable_userinfo();
  inline ::METRO::CRO::MESSAGES::User* release_userinfo();
  inline void set_allocated_userinfo(::METRO::CRO::MESSAGES::User* userinfo);

  // repeated string classid = 2;
  inline int classid_size() const;
  inline void clear_classid();
  static const int kClassidFieldNumber = 2;
  inline const ::std::string& classid(int index) const;
  inline ::std::string* mutable_classid(int index);
  inline void set_classid(int index, const ::std::string& value);
  inline void set_classid(int index, const char* value);
  inline void set_classid(int index, const char* value, size_t size);
  inline ::std::string* add_classid();
  inline void add_classid(const ::std::string& value);
  inline void add_classid(const char* value);
  inline void add_classid(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& classid() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_classid();

  // optional double rate = 3;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 3;
  inline double rate() const;
  inline void set_rate(double value);

  // @@protoc_insertion_point(class_scope:METRO.CRO.MESSAGES.Teacher)
 private:
  inline void set_has_userinfo();
  inline void clear_has_userinfo();
  inline void set_has_rate();
  inline void clear_has_rate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::METRO::CRO::MESSAGES::User* userinfo_;
  ::google::protobuf::RepeatedPtrField< ::std::string> classid_;
  double rate_;
  friend void  protobuf_AddDesc_Teacher_2eproto();
  friend void protobuf_AssignDesc_Teacher_2eproto();
  friend void protobuf_ShutdownFile_Teacher_2eproto();

  void InitAsDefaultInstance();
  static Teacher* default_instance_;
};
// ===================================================================


// ===================================================================

// Teacher

// required .METRO.CRO.MESSAGES.User userinfo = 1;
inline bool Teacher::has_userinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Teacher::set_has_userinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Teacher::clear_has_userinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Teacher::clear_userinfo() {
  if (userinfo_ != NULL) userinfo_->::METRO::CRO::MESSAGES::User::Clear();
  clear_has_userinfo();
}
inline const ::METRO::CRO::MESSAGES::User& Teacher::userinfo() const {
  // @@protoc_insertion_point(field_get:METRO.CRO.MESSAGES.Teacher.userinfo)
  return userinfo_ != NULL ? *userinfo_ : *default_instance_->userinfo_;
}
inline ::METRO::CRO::MESSAGES::User* Teacher::mutable_userinfo() {
  set_has_userinfo();
  if (userinfo_ == NULL) userinfo_ = new ::METRO::CRO::MESSAGES::User;
  // @@protoc_insertion_point(field_mutable:METRO.CRO.MESSAGES.Teacher.userinfo)
  return userinfo_;
}
inline ::METRO::CRO::MESSAGES::User* Teacher::release_userinfo() {
  clear_has_userinfo();
  ::METRO::CRO::MESSAGES::User* temp = userinfo_;
  userinfo_ = NULL;
  return temp;
}
inline void Teacher::set_allocated_userinfo(::METRO::CRO::MESSAGES::User* userinfo) {
  delete userinfo_;
  userinfo_ = userinfo;
  if (userinfo) {
    set_has_userinfo();
  } else {
    clear_has_userinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:METRO.CRO.MESSAGES.Teacher.userinfo)
}

// repeated string classid = 2;
inline int Teacher::classid_size() const {
  return classid_.size();
}
inline void Teacher::clear_classid() {
  classid_.Clear();
}
inline const ::std::string& Teacher::classid(int index) const {
  // @@protoc_insertion_point(field_get:METRO.CRO.MESSAGES.Teacher.classid)
  return classid_.Get(index);
}
inline ::std::string* Teacher::mutable_classid(int index) {
  // @@protoc_insertion_point(field_mutable:METRO.CRO.MESSAGES.Teacher.classid)
  return classid_.Mutable(index);
}
inline void Teacher::set_classid(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:METRO.CRO.MESSAGES.Teacher.classid)
  classid_.Mutable(index)->assign(value);
}
inline void Teacher::set_classid(int index, const char* value) {
  classid_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:METRO.CRO.MESSAGES.Teacher.classid)
}
inline void Teacher::set_classid(int index, const char* value, size_t size) {
  classid_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:METRO.CRO.MESSAGES.Teacher.classid)
}
inline ::std::string* Teacher::add_classid() {
  return classid_.Add();
}
inline void Teacher::add_classid(const ::std::string& value) {
  classid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:METRO.CRO.MESSAGES.Teacher.classid)
}
inline void Teacher::add_classid(const char* value) {
  classid_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:METRO.CRO.MESSAGES.Teacher.classid)
}
inline void Teacher::add_classid(const char* value, size_t size) {
  classid_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:METRO.CRO.MESSAGES.Teacher.classid)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Teacher::classid() const {
  // @@protoc_insertion_point(field_list:METRO.CRO.MESSAGES.Teacher.classid)
  return classid_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Teacher::mutable_classid() {
  // @@protoc_insertion_point(field_mutable_list:METRO.CRO.MESSAGES.Teacher.classid)
  return &classid_;
}

// optional double rate = 3;
inline bool Teacher::has_rate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Teacher::set_has_rate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Teacher::clear_has_rate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Teacher::clear_rate() {
  rate_ = 0;
  clear_has_rate();
}
inline double Teacher::rate() const {
  // @@protoc_insertion_point(field_get:METRO.CRO.MESSAGES.Teacher.rate)
  return rate_;
}
inline void Teacher::set_rate(double value) {
  set_has_rate();
  rate_ = value;
  // @@protoc_insertion_point(field_set:METRO.CRO.MESSAGES.Teacher.rate)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MESSAGES
}  // namespace CRO
}  // namespace METRO

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Teacher_2eproto__INCLUDED
