// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TeacherOpenClass.proto

#ifndef PROTOBUF_TeacherOpenClass_2eproto__INCLUDED
#define PROTOBUF_TeacherOpenClass_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "IpcMessage.pb.h"
// @@protoc_insertion_point(includes)

namespace METRO {
namespace CRO {
namespace MESSAGES {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TeacherOpenClass_2eproto();
void protobuf_AssignDesc_TeacherOpenClass_2eproto();
void protobuf_ShutdownFile_TeacherOpenClass_2eproto();

class TeacherOpenClass;

// ===================================================================

class TeacherOpenClass : public ::google::protobuf::Message {
 public:
  TeacherOpenClass();
  virtual ~TeacherOpenClass();

  TeacherOpenClass(const TeacherOpenClass& from);

  inline TeacherOpenClass& operator=(const TeacherOpenClass& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeacherOpenClass& default_instance();

  void Swap(TeacherOpenClass* other);

  // implements Message ----------------------------------------------

  TeacherOpenClass* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeacherOpenClass& from);
  void MergeFrom(const TeacherOpenClass& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // optional string classid = 2;
  inline bool has_classid() const;
  inline void clear_classid();
  static const int kClassidFieldNumber = 2;
  inline const ::std::string& classid() const;
  inline void set_classid(const ::std::string& value);
  inline void set_classid(const char* value);
  inline void set_classid(const char* value, size_t size);
  inline ::std::string* mutable_classid();
  inline ::std::string* release_classid();
  inline void set_allocated_classid(::std::string* classid);

  static const int kMessageFieldNumber = 301;
  static ::google::protobuf::internal::ExtensionIdentifier< ::METRO::CRO::MESSAGES::IpcMessage,
      ::google::protobuf::internal::MessageTypeTraits< ::METRO::CRO::MESSAGES::TeacherOpenClass >, 11, false >
    message;
  // @@protoc_insertion_point(class_scope:METRO.CRO.MESSAGES.TeacherOpenClass)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_classid();
  inline void clear_has_classid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* username_;
  ::std::string* classid_;
  friend void  protobuf_AddDesc_TeacherOpenClass_2eproto();
  friend void protobuf_AssignDesc_TeacherOpenClass_2eproto();
  friend void protobuf_ShutdownFile_TeacherOpenClass_2eproto();

  void InitAsDefaultInstance();
  static TeacherOpenClass* default_instance_;
};
// ===================================================================


// ===================================================================

// TeacherOpenClass

// optional string username = 1;
inline bool TeacherOpenClass::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeacherOpenClass::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeacherOpenClass::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeacherOpenClass::clear_username() {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& TeacherOpenClass::username() const {
  // @@protoc_insertion_point(field_get:METRO.CRO.MESSAGES.TeacherOpenClass.username)
  return *username_;
}
inline void TeacherOpenClass::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:METRO.CRO.MESSAGES.TeacherOpenClass.username)
}
inline void TeacherOpenClass::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:METRO.CRO.MESSAGES.TeacherOpenClass.username)
}
inline void TeacherOpenClass::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:METRO.CRO.MESSAGES.TeacherOpenClass.username)
}
inline ::std::string* TeacherOpenClass::mutable_username() {
  set_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:METRO.CRO.MESSAGES.TeacherOpenClass.username)
  return username_;
}
inline ::std::string* TeacherOpenClass::release_username() {
  clear_has_username();
  if (username_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TeacherOpenClass::set_allocated_username(::std::string* username) {
  if (username_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:METRO.CRO.MESSAGES.TeacherOpenClass.username)
}

// optional string classid = 2;
inline bool TeacherOpenClass::has_classid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeacherOpenClass::set_has_classid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeacherOpenClass::clear_has_classid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeacherOpenClass::clear_classid() {
  if (classid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    classid_->clear();
  }
  clear_has_classid();
}
inline const ::std::string& TeacherOpenClass::classid() const {
  // @@protoc_insertion_point(field_get:METRO.CRO.MESSAGES.TeacherOpenClass.classid)
  return *classid_;
}
inline void TeacherOpenClass::set_classid(const ::std::string& value) {
  set_has_classid();
  if (classid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    classid_ = new ::std::string;
  }
  classid_->assign(value);
  // @@protoc_insertion_point(field_set:METRO.CRO.MESSAGES.TeacherOpenClass.classid)
}
inline void TeacherOpenClass::set_classid(const char* value) {
  set_has_classid();
  if (classid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    classid_ = new ::std::string;
  }
  classid_->assign(value);
  // @@protoc_insertion_point(field_set_char:METRO.CRO.MESSAGES.TeacherOpenClass.classid)
}
inline void TeacherOpenClass::set_classid(const char* value, size_t size) {
  set_has_classid();
  if (classid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    classid_ = new ::std::string;
  }
  classid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:METRO.CRO.MESSAGES.TeacherOpenClass.classid)
}
inline ::std::string* TeacherOpenClass::mutable_classid() {
  set_has_classid();
  if (classid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    classid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:METRO.CRO.MESSAGES.TeacherOpenClass.classid)
  return classid_;
}
inline ::std::string* TeacherOpenClass::release_classid() {
  clear_has_classid();
  if (classid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = classid_;
    classid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TeacherOpenClass::set_allocated_classid(::std::string* classid) {
  if (classid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete classid_;
  }
  if (classid) {
    set_has_classid();
    classid_ = classid;
  } else {
    clear_has_classid();
    classid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:METRO.CRO.MESSAGES.TeacherOpenClass.classid)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MESSAGES
}  // namespace CRO
}  // namespace METRO

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TeacherOpenClass_2eproto__INCLUDED
