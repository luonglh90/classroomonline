// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ClassroomInfoOfCategory.proto

#ifndef PROTOBUF_ClassroomInfoOfCategory_2eproto__INCLUDED
#define PROTOBUF_ClassroomInfoOfCategory_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "IpcMessage.pb.h"
#include "ClassroomInfo.pb.h"
// @@protoc_insertion_point(includes)

namespace METRO {
namespace CRO {
namespace MESSAGES {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ClassroomInfoOfCategory_2eproto();
void protobuf_AssignDesc_ClassroomInfoOfCategory_2eproto();
void protobuf_ShutdownFile_ClassroomInfoOfCategory_2eproto();

class ClassroomInfoOfCategory;

// ===================================================================

class ClassroomInfoOfCategory : public ::google::protobuf::Message {
 public:
  ClassroomInfoOfCategory();
  virtual ~ClassroomInfoOfCategory();

  ClassroomInfoOfCategory(const ClassroomInfoOfCategory& from);

  inline ClassroomInfoOfCategory& operator=(const ClassroomInfoOfCategory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClassroomInfoOfCategory& default_instance();

  void Swap(ClassroomInfoOfCategory* other);

  // implements Message ----------------------------------------------

  ClassroomInfoOfCategory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClassroomInfoOfCategory& from);
  void MergeFrom(const ClassroomInfoOfCategory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string cate_id = 1;
  inline bool has_cate_id() const;
  inline void clear_cate_id();
  static const int kCateIdFieldNumber = 1;
  inline const ::std::string& cate_id() const;
  inline void set_cate_id(const ::std::string& value);
  inline void set_cate_id(const char* value);
  inline void set_cate_id(const char* value, size_t size);
  inline ::std::string* mutable_cate_id();
  inline ::std::string* release_cate_id();
  inline void set_allocated_cate_id(::std::string* cate_id);

  // repeated .METRO.CRO.MESSAGES.ClassroomInfo listOfClasses = 2;
  inline int listofclasses_size() const;
  inline void clear_listofclasses();
  static const int kListOfClassesFieldNumber = 2;
  inline const ::METRO::CRO::MESSAGES::ClassroomInfo& listofclasses(int index) const;
  inline ::METRO::CRO::MESSAGES::ClassroomInfo* mutable_listofclasses(int index);
  inline ::METRO::CRO::MESSAGES::ClassroomInfo* add_listofclasses();
  inline const ::google::protobuf::RepeatedPtrField< ::METRO::CRO::MESSAGES::ClassroomInfo >&
      listofclasses() const;
  inline ::google::protobuf::RepeatedPtrField< ::METRO::CRO::MESSAGES::ClassroomInfo >*
      mutable_listofclasses();

  static const int kMessageFieldNumber = 207;
  static ::google::protobuf::internal::ExtensionIdentifier< ::METRO::CRO::MESSAGES::IpcMessage,
      ::google::protobuf::internal::MessageTypeTraits< ::METRO::CRO::MESSAGES::ClassroomInfoOfCategory >, 11, false >
    message;
  // @@protoc_insertion_point(class_scope:METRO.CRO.MESSAGES.ClassroomInfoOfCategory)
 private:
  inline void set_has_cate_id();
  inline void clear_has_cate_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* cate_id_;
  ::google::protobuf::RepeatedPtrField< ::METRO::CRO::MESSAGES::ClassroomInfo > listofclasses_;
  friend void  protobuf_AddDesc_ClassroomInfoOfCategory_2eproto();
  friend void protobuf_AssignDesc_ClassroomInfoOfCategory_2eproto();
  friend void protobuf_ShutdownFile_ClassroomInfoOfCategory_2eproto();

  void InitAsDefaultInstance();
  static ClassroomInfoOfCategory* default_instance_;
};
// ===================================================================


// ===================================================================

// ClassroomInfoOfCategory

// required string cate_id = 1;
inline bool ClassroomInfoOfCategory::has_cate_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClassroomInfoOfCategory::set_has_cate_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClassroomInfoOfCategory::clear_has_cate_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClassroomInfoOfCategory::clear_cate_id() {
  if (cate_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cate_id_->clear();
  }
  clear_has_cate_id();
}
inline const ::std::string& ClassroomInfoOfCategory::cate_id() const {
  // @@protoc_insertion_point(field_get:METRO.CRO.MESSAGES.ClassroomInfoOfCategory.cate_id)
  return *cate_id_;
}
inline void ClassroomInfoOfCategory::set_cate_id(const ::std::string& value) {
  set_has_cate_id();
  if (cate_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cate_id_ = new ::std::string;
  }
  cate_id_->assign(value);
  // @@protoc_insertion_point(field_set:METRO.CRO.MESSAGES.ClassroomInfoOfCategory.cate_id)
}
inline void ClassroomInfoOfCategory::set_cate_id(const char* value) {
  set_has_cate_id();
  if (cate_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cate_id_ = new ::std::string;
  }
  cate_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:METRO.CRO.MESSAGES.ClassroomInfoOfCategory.cate_id)
}
inline void ClassroomInfoOfCategory::set_cate_id(const char* value, size_t size) {
  set_has_cate_id();
  if (cate_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cate_id_ = new ::std::string;
  }
  cate_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:METRO.CRO.MESSAGES.ClassroomInfoOfCategory.cate_id)
}
inline ::std::string* ClassroomInfoOfCategory::mutable_cate_id() {
  set_has_cate_id();
  if (cate_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cate_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:METRO.CRO.MESSAGES.ClassroomInfoOfCategory.cate_id)
  return cate_id_;
}
inline ::std::string* ClassroomInfoOfCategory::release_cate_id() {
  clear_has_cate_id();
  if (cate_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cate_id_;
    cate_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClassroomInfoOfCategory::set_allocated_cate_id(::std::string* cate_id) {
  if (cate_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cate_id_;
  }
  if (cate_id) {
    set_has_cate_id();
    cate_id_ = cate_id;
  } else {
    clear_has_cate_id();
    cate_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:METRO.CRO.MESSAGES.ClassroomInfoOfCategory.cate_id)
}

// repeated .METRO.CRO.MESSAGES.ClassroomInfo listOfClasses = 2;
inline int ClassroomInfoOfCategory::listofclasses_size() const {
  return listofclasses_.size();
}
inline void ClassroomInfoOfCategory::clear_listofclasses() {
  listofclasses_.Clear();
}
inline const ::METRO::CRO::MESSAGES::ClassroomInfo& ClassroomInfoOfCategory::listofclasses(int index) const {
  // @@protoc_insertion_point(field_get:METRO.CRO.MESSAGES.ClassroomInfoOfCategory.listOfClasses)
  return listofclasses_.Get(index);
}
inline ::METRO::CRO::MESSAGES::ClassroomInfo* ClassroomInfoOfCategory::mutable_listofclasses(int index) {
  // @@protoc_insertion_point(field_mutable:METRO.CRO.MESSAGES.ClassroomInfoOfCategory.listOfClasses)
  return listofclasses_.Mutable(index);
}
inline ::METRO::CRO::MESSAGES::ClassroomInfo* ClassroomInfoOfCategory::add_listofclasses() {
  // @@protoc_insertion_point(field_add:METRO.CRO.MESSAGES.ClassroomInfoOfCategory.listOfClasses)
  return listofclasses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::METRO::CRO::MESSAGES::ClassroomInfo >&
ClassroomInfoOfCategory::listofclasses() const {
  // @@protoc_insertion_point(field_list:METRO.CRO.MESSAGES.ClassroomInfoOfCategory.listOfClasses)
  return listofclasses_;
}
inline ::google::protobuf::RepeatedPtrField< ::METRO::CRO::MESSAGES::ClassroomInfo >*
ClassroomInfoOfCategory::mutable_listofclasses() {
  // @@protoc_insertion_point(field_mutable_list:METRO.CRO.MESSAGES.ClassroomInfoOfCategory.listOfClasses)
  return &listofclasses_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MESSAGES
}  // namespace CRO
}  // namespace METRO

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ClassroomInfoOfCategory_2eproto__INCLUDED
