// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "TeacherOpenClass.pb.h"
// @@protoc_insertion_point(imports)

@implementation TeacherOpenClassRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [TeacherOpenClassRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface TeacherOpenClass ()
@property (strong) NSString* username;
@property (strong) NSString* classid;
@end

@implementation TeacherOpenClass

- (BOOL) hasUsername {
  return !!hasUsername_;
}
- (void) setHasUsername:(BOOL) _value_ {
  hasUsername_ = !!_value_;
}
@synthesize username;
- (BOOL) hasClassid {
  return !!hasClassid_;
}
- (void) setHasClassid:(BOOL) _value_ {
  hasClassid_ = !!_value_;
}
@synthesize classid;
- (instancetype) init {
  if ((self = [super init])) {
    self.username = @"";
    self.classid = @"";
  }
  return self;
}
static TeacherOpenClass* defaultTeacherOpenClassInstance = nil;
+ (void) initialize {
  if (self == [TeacherOpenClass class]) {
    defaultTeacherOpenClassInstance = [[TeacherOpenClass alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTeacherOpenClassInstance;
}
- (instancetype) defaultInstance {
  return defaultTeacherOpenClassInstance;
}
- (BOOL) isInitialized {
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUsername) {
    [output writeString:1 value:self.username];
  }
  if (self.hasClassid) {
    [output writeString:2 value:self.classid];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUsername) {
    size_ += computeStringSize(1, self.username);
  }
  if (self.hasClassid) {
    size_ += computeStringSize(2, self.classid);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TeacherOpenClass*) parseFromData:(NSData*) data {
  return (TeacherOpenClass*)[[[TeacherOpenClass builder] mergeFromData:data] build];
}
+ (TeacherOpenClass*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TeacherOpenClass*)[[[TeacherOpenClass builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TeacherOpenClass*) parseFromInputStream:(NSInputStream*) input {
  return (TeacherOpenClass*)[[[TeacherOpenClass builder] mergeFromInputStream:input] build];
}
+ (TeacherOpenClass*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TeacherOpenClass*)[[[TeacherOpenClass builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TeacherOpenClass*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TeacherOpenClass*)[[[TeacherOpenClass builder] mergeFromCodedInputStream:input] build];
}
+ (TeacherOpenClass*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TeacherOpenClass*)[[[TeacherOpenClass builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TeacherOpenClassBuilder*) builder {
  return [[TeacherOpenClassBuilder alloc] init];
}
+ (TeacherOpenClassBuilder*) builderWithPrototype:(TeacherOpenClass*) prototype {
  return [[TeacherOpenClass builder] mergeFrom:prototype];
}
- (TeacherOpenClassBuilder*) builder {
  return [TeacherOpenClass builder];
}
- (TeacherOpenClassBuilder*) toBuilder {
  return [TeacherOpenClass builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUsername) {
    [output appendFormat:@"%@%@: %@\n", indent, @"username", self.username];
  }
  if (self.hasClassid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"classid", self.classid];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUsername) {
    [dictionary setObject: self.username forKey: @"username"];
  }
  if (self.hasClassid) {
    [dictionary setObject: self.classid forKey: @"classid"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TeacherOpenClass class]]) {
    return NO;
  }
  TeacherOpenClass *otherMessage = other;
  return
      self.hasUsername == otherMessage.hasUsername &&
      (!self.hasUsername || [self.username isEqual:otherMessage.username]) &&
      self.hasClassid == otherMessage.hasClassid &&
      (!self.hasClassid || [self.classid isEqual:otherMessage.classid]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUsername) {
    hashCode = hashCode * 31 + [self.username hash];
  }
  if (self.hasClassid) {
    hashCode = hashCode * 31 + [self.classid hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TeacherOpenClassBuilder()
@property (strong) TeacherOpenClass* resultTeacherOpenClass;
@end

@implementation TeacherOpenClassBuilder
@synthesize resultTeacherOpenClass;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTeacherOpenClass = [[TeacherOpenClass alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTeacherOpenClass;
}
- (TeacherOpenClassBuilder*) clear {
  self.resultTeacherOpenClass = [[TeacherOpenClass alloc] init];
  return self;
}
- (TeacherOpenClassBuilder*) clone {
  return [TeacherOpenClass builderWithPrototype:resultTeacherOpenClass];
}
- (TeacherOpenClass*) defaultInstance {
  return [TeacherOpenClass defaultInstance];
}
- (TeacherOpenClass*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TeacherOpenClass*) buildPartial {
  TeacherOpenClass* returnMe = resultTeacherOpenClass;
  self.resultTeacherOpenClass = nil;
  return returnMe;
}
- (TeacherOpenClassBuilder*) mergeFrom:(TeacherOpenClass*) other {
  if (other == [TeacherOpenClass defaultInstance]) {
    return self;
  }
  if (other.hasUsername) {
    [self setUsername:other.username];
  }
  if (other.hasClassid) {
    [self setClassid:other.classid];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TeacherOpenClassBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TeacherOpenClassBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUsername:[input readString]];
        break;
      }
      case 18: {
        [self setClassid:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUsername {
  return resultTeacherOpenClass.hasUsername;
}
- (NSString*) username {
  return resultTeacherOpenClass.username;
}
- (TeacherOpenClassBuilder*) setUsername:(NSString*) value {
  resultTeacherOpenClass.hasUsername = YES;
  resultTeacherOpenClass.username = value;
  return self;
}
- (TeacherOpenClassBuilder*) clearUsername {
  resultTeacherOpenClass.hasUsername = NO;
  resultTeacherOpenClass.username = @"";
  return self;
}
- (BOOL) hasClassid {
  return resultTeacherOpenClass.hasClassid;
}
- (NSString*) classid {
  return resultTeacherOpenClass.classid;
}
- (TeacherOpenClassBuilder*) setClassid:(NSString*) value {
  resultTeacherOpenClass.hasClassid = YES;
  resultTeacherOpenClass.classid = value;
  return self;
}
- (TeacherOpenClassBuilder*) clearClassid {
  resultTeacherOpenClass.hasClassid = NO;
  resultTeacherOpenClass.classid = @"";
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
