// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "TestRoomInfo.pb.h"
// @@protoc_insertion_point(imports)

@implementation TestRoomInfoRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [TestRoomInfoRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [UserRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface TestRoomInfo ()
@property (strong) NSString* uid;
@property (strong) NSString* cateid;
@property (strong) NSString* name;
@property (strong) User* teacher;
@property (strong) NSString* pb_description;
@property (strong) NSString* imgurl;
@property (strong) NSString* timeopen;
@property (strong) NSString* timeclose;
@end

@implementation TestRoomInfo

- (BOOL) hasUid {
  return !!hasUid_;
}
- (void) setHasUid:(BOOL) _value_ {
  hasUid_ = !!_value_;
}
@synthesize uid;
- (BOOL) hasCateid {
  return !!hasCateid_;
}
- (void) setHasCateid:(BOOL) _value_ {
  hasCateid_ = !!_value_;
}
@synthesize cateid;
- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasTeacher {
  return !!hasTeacher_;
}
- (void) setHasTeacher:(BOOL) _value_ {
  hasTeacher_ = !!_value_;
}
@synthesize teacher;
- (BOOL) hasDescription {
  return !!hasDescription_;
}
- (void) setHasDescription:(BOOL) _value_ {
  hasDescription_ = !!_value_;
}
@synthesize pb_description;
- (BOOL) hasImgurl {
  return !!hasImgurl_;
}
- (void) setHasImgurl:(BOOL) _value_ {
  hasImgurl_ = !!_value_;
}
@synthesize imgurl;
- (BOOL) hasTimeopen {
  return !!hasTimeopen_;
}
- (void) setHasTimeopen:(BOOL) _value_ {
  hasTimeopen_ = !!_value_;
}
@synthesize timeopen;
- (BOOL) hasTimeclose {
  return !!hasTimeclose_;
}
- (void) setHasTimeclose:(BOOL) _value_ {
  hasTimeclose_ = !!_value_;
}
@synthesize timeclose;
- (instancetype) init {
  if ((self = [super init])) {
    self.uid = @"";
    self.cateid = @"";
    self.name = @"";
    self.teacher = [User defaultInstance];
    self.pb_description = @"";
    self.imgurl = @"";
    self.timeopen = @"";
    self.timeclose = @"";
  }
  return self;
}
static TestRoomInfo* defaultTestRoomInfoInstance = nil;
+ (void) initialize {
  if (self == [TestRoomInfo class]) {
    defaultTestRoomInfoInstance = [[TestRoomInfo alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultTestRoomInfoInstance;
}
- (instancetype) defaultInstance {
  return defaultTestRoomInfoInstance;
}
- (BOOL) isInitialized {
  if (!self.hasUid) {
    return NO;
  }
  if (!self.hasCateid) {
    return NO;
  }
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasTeacher) {
    return NO;
  }
  if (!self.teacher.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasUid) {
    [output writeString:1 value:self.uid];
  }
  if (self.hasCateid) {
    [output writeString:2 value:self.cateid];
  }
  if (self.hasName) {
    [output writeString:3 value:self.name];
  }
  if (self.hasTeacher) {
    [output writeMessage:4 value:self.teacher];
  }
  if (self.hasDescription) {
    [output writeString:5 value:self.pb_description];
  }
  if (self.hasImgurl) {
    [output writeString:6 value:self.imgurl];
  }
  if (self.hasTimeopen) {
    [output writeString:7 value:self.timeopen];
  }
  if (self.hasTimeclose) {
    [output writeString:8 value:self.timeclose];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasUid) {
    size_ += computeStringSize(1, self.uid);
  }
  if (self.hasCateid) {
    size_ += computeStringSize(2, self.cateid);
  }
  if (self.hasName) {
    size_ += computeStringSize(3, self.name);
  }
  if (self.hasTeacher) {
    size_ += computeMessageSize(4, self.teacher);
  }
  if (self.hasDescription) {
    size_ += computeStringSize(5, self.pb_description);
  }
  if (self.hasImgurl) {
    size_ += computeStringSize(6, self.imgurl);
  }
  if (self.hasTimeopen) {
    size_ += computeStringSize(7, self.timeopen);
  }
  if (self.hasTimeclose) {
    size_ += computeStringSize(8, self.timeclose);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (TestRoomInfo*) parseFromData:(NSData*) data {
  return (TestRoomInfo*)[[[TestRoomInfo builder] mergeFromData:data] build];
}
+ (TestRoomInfo*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestRoomInfo*)[[[TestRoomInfo builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (TestRoomInfo*) parseFromInputStream:(NSInputStream*) input {
  return (TestRoomInfo*)[[[TestRoomInfo builder] mergeFromInputStream:input] build];
}
+ (TestRoomInfo*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestRoomInfo*)[[[TestRoomInfo builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestRoomInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (TestRoomInfo*)[[[TestRoomInfo builder] mergeFromCodedInputStream:input] build];
}
+ (TestRoomInfo*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (TestRoomInfo*)[[[TestRoomInfo builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (TestRoomInfoBuilder*) builder {
  return [[TestRoomInfoBuilder alloc] init];
}
+ (TestRoomInfoBuilder*) builderWithPrototype:(TestRoomInfo*) prototype {
  return [[TestRoomInfo builder] mergeFrom:prototype];
}
- (TestRoomInfoBuilder*) builder {
  return [TestRoomInfo builder];
}
- (TestRoomInfoBuilder*) toBuilder {
  return [TestRoomInfo builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasUid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"uid", self.uid];
  }
  if (self.hasCateid) {
    [output appendFormat:@"%@%@: %@\n", indent, @"cateid", self.cateid];
  }
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasTeacher) {
    [output appendFormat:@"%@%@ {\n", indent, @"teacher"];
    [self.teacher writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasDescription) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pb_description", self.pb_description];
  }
  if (self.hasImgurl) {
    [output appendFormat:@"%@%@: %@\n", indent, @"imgurl", self.imgurl];
  }
  if (self.hasTimeopen) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timeopen", self.timeopen];
  }
  if (self.hasTimeclose) {
    [output appendFormat:@"%@%@: %@\n", indent, @"timeclose", self.timeclose];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasUid) {
    [dictionary setObject: self.uid forKey: @"uid"];
  }
  if (self.hasCateid) {
    [dictionary setObject: self.cateid forKey: @"cateid"];
  }
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasTeacher) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.teacher storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"teacher"];
  }
  if (self.hasDescription) {
    [dictionary setObject: self.pb_description forKey: @"pb_description"];
  }
  if (self.hasImgurl) {
    [dictionary setObject: self.imgurl forKey: @"imgurl"];
  }
  if (self.hasTimeopen) {
    [dictionary setObject: self.timeopen forKey: @"timeopen"];
  }
  if (self.hasTimeclose) {
    [dictionary setObject: self.timeclose forKey: @"timeclose"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[TestRoomInfo class]]) {
    return NO;
  }
  TestRoomInfo *otherMessage = other;
  return
      self.hasUid == otherMessage.hasUid &&
      (!self.hasUid || [self.uid isEqual:otherMessage.uid]) &&
      self.hasCateid == otherMessage.hasCateid &&
      (!self.hasCateid || [self.cateid isEqual:otherMessage.cateid]) &&
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasTeacher == otherMessage.hasTeacher &&
      (!self.hasTeacher || [self.teacher isEqual:otherMessage.teacher]) &&
      self.hasDescription == otherMessage.hasDescription &&
      (!self.hasDescription || [self.pb_description isEqual:otherMessage.pb_description]) &&
      self.hasImgurl == otherMessage.hasImgurl &&
      (!self.hasImgurl || [self.imgurl isEqual:otherMessage.imgurl]) &&
      self.hasTimeopen == otherMessage.hasTimeopen &&
      (!self.hasTimeopen || [self.timeopen isEqual:otherMessage.timeopen]) &&
      self.hasTimeclose == otherMessage.hasTimeclose &&
      (!self.hasTimeclose || [self.timeclose isEqual:otherMessage.timeclose]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasUid) {
    hashCode = hashCode * 31 + [self.uid hash];
  }
  if (self.hasCateid) {
    hashCode = hashCode * 31 + [self.cateid hash];
  }
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasTeacher) {
    hashCode = hashCode * 31 + [self.teacher hash];
  }
  if (self.hasDescription) {
    hashCode = hashCode * 31 + [self.pb_description hash];
  }
  if (self.hasImgurl) {
    hashCode = hashCode * 31 + [self.imgurl hash];
  }
  if (self.hasTimeopen) {
    hashCode = hashCode * 31 + [self.timeopen hash];
  }
  if (self.hasTimeclose) {
    hashCode = hashCode * 31 + [self.timeclose hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface TestRoomInfoBuilder()
@property (strong) TestRoomInfo* resultTestRoomInfo;
@end

@implementation TestRoomInfoBuilder
@synthesize resultTestRoomInfo;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultTestRoomInfo = [[TestRoomInfo alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultTestRoomInfo;
}
- (TestRoomInfoBuilder*) clear {
  self.resultTestRoomInfo = [[TestRoomInfo alloc] init];
  return self;
}
- (TestRoomInfoBuilder*) clone {
  return [TestRoomInfo builderWithPrototype:resultTestRoomInfo];
}
- (TestRoomInfo*) defaultInstance {
  return [TestRoomInfo defaultInstance];
}
- (TestRoomInfo*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (TestRoomInfo*) buildPartial {
  TestRoomInfo* returnMe = resultTestRoomInfo;
  self.resultTestRoomInfo = nil;
  return returnMe;
}
- (TestRoomInfoBuilder*) mergeFrom:(TestRoomInfo*) other {
  if (other == [TestRoomInfo defaultInstance]) {
    return self;
  }
  if (other.hasUid) {
    [self setUid:other.uid];
  }
  if (other.hasCateid) {
    [self setCateid:other.cateid];
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasTeacher) {
    [self mergeTeacher:other.teacher];
  }
  if (other.hasDescription) {
    [self setDescription:other.pb_description];
  }
  if (other.hasImgurl) {
    [self setImgurl:other.imgurl];
  }
  if (other.hasTimeopen) {
    [self setTimeopen:other.timeopen];
  }
  if (other.hasTimeclose) {
    [self setTimeclose:other.timeclose];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (TestRoomInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (TestRoomInfoBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setUid:[input readString]];
        break;
      }
      case 18: {
        [self setCateid:[input readString]];
        break;
      }
      case 26: {
        [self setName:[input readString]];
        break;
      }
      case 34: {
        UserBuilder* subBuilder = [User builder];
        if (self.hasTeacher) {
          [subBuilder mergeFrom:self.teacher];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setTeacher:[subBuilder buildPartial]];
        break;
      }
      case 42: {
        [self setDescription:[input readString]];
        break;
      }
      case 50: {
        [self setImgurl:[input readString]];
        break;
      }
      case 58: {
        [self setTimeopen:[input readString]];
        break;
      }
      case 66: {
        [self setTimeclose:[input readString]];
        break;
      }
    }
  }
}
- (BOOL) hasUid {
  return resultTestRoomInfo.hasUid;
}
- (NSString*) uid {
  return resultTestRoomInfo.uid;
}
- (TestRoomInfoBuilder*) setUid:(NSString*) value {
  resultTestRoomInfo.hasUid = YES;
  resultTestRoomInfo.uid = value;
  return self;
}
- (TestRoomInfoBuilder*) clearUid {
  resultTestRoomInfo.hasUid = NO;
  resultTestRoomInfo.uid = @"";
  return self;
}
- (BOOL) hasCateid {
  return resultTestRoomInfo.hasCateid;
}
- (NSString*) cateid {
  return resultTestRoomInfo.cateid;
}
- (TestRoomInfoBuilder*) setCateid:(NSString*) value {
  resultTestRoomInfo.hasCateid = YES;
  resultTestRoomInfo.cateid = value;
  return self;
}
- (TestRoomInfoBuilder*) clearCateid {
  resultTestRoomInfo.hasCateid = NO;
  resultTestRoomInfo.cateid = @"";
  return self;
}
- (BOOL) hasName {
  return resultTestRoomInfo.hasName;
}
- (NSString*) name {
  return resultTestRoomInfo.name;
}
- (TestRoomInfoBuilder*) setName:(NSString*) value {
  resultTestRoomInfo.hasName = YES;
  resultTestRoomInfo.name = value;
  return self;
}
- (TestRoomInfoBuilder*) clearName {
  resultTestRoomInfo.hasName = NO;
  resultTestRoomInfo.name = @"";
  return self;
}
- (BOOL) hasTeacher {
  return resultTestRoomInfo.hasTeacher;
}
- (User*) teacher {
  return resultTestRoomInfo.teacher;
}
- (TestRoomInfoBuilder*) setTeacher:(User*) value {
  resultTestRoomInfo.hasTeacher = YES;
  resultTestRoomInfo.teacher = value;
  return self;
}
- (TestRoomInfoBuilder*) setTeacherBuilder:(UserBuilder*) builderForValue {
  return [self setTeacher:[builderForValue build]];
}
- (TestRoomInfoBuilder*) mergeTeacher:(User*) value {
  if (resultTestRoomInfo.hasTeacher &&
      resultTestRoomInfo.teacher != [User defaultInstance]) {
    resultTestRoomInfo.teacher =
      [[[User builderWithPrototype:resultTestRoomInfo.teacher] mergeFrom:value] buildPartial];
  } else {
    resultTestRoomInfo.teacher = value;
  }
  resultTestRoomInfo.hasTeacher = YES;
  return self;
}
- (TestRoomInfoBuilder*) clearTeacher {
  resultTestRoomInfo.hasTeacher = NO;
  resultTestRoomInfo.teacher = [User defaultInstance];
  return self;
}
- (BOOL) hasDescription {
  return resultTestRoomInfo.hasDescription;
}
- (NSString*) pb_description {
  return resultTestRoomInfo.pb_description;
}
- (TestRoomInfoBuilder*) setDescription:(NSString*) value {
  resultTestRoomInfo.hasDescription = YES;
  resultTestRoomInfo.pb_description = value;
  return self;
}
- (TestRoomInfoBuilder*) clearDescription {
  resultTestRoomInfo.hasDescription = NO;
  resultTestRoomInfo.pb_description = @"";
  return self;
}
- (BOOL) hasImgurl {
  return resultTestRoomInfo.hasImgurl;
}
- (NSString*) imgurl {
  return resultTestRoomInfo.imgurl;
}
- (TestRoomInfoBuilder*) setImgurl:(NSString*) value {
  resultTestRoomInfo.hasImgurl = YES;
  resultTestRoomInfo.imgurl = value;
  return self;
}
- (TestRoomInfoBuilder*) clearImgurl {
  resultTestRoomInfo.hasImgurl = NO;
  resultTestRoomInfo.imgurl = @"";
  return self;
}
- (BOOL) hasTimeopen {
  return resultTestRoomInfo.hasTimeopen;
}
- (NSString*) timeopen {
  return resultTestRoomInfo.timeopen;
}
- (TestRoomInfoBuilder*) setTimeopen:(NSString*) value {
  resultTestRoomInfo.hasTimeopen = YES;
  resultTestRoomInfo.timeopen = value;
  return self;
}
- (TestRoomInfoBuilder*) clearTimeopen {
  resultTestRoomInfo.hasTimeopen = NO;
  resultTestRoomInfo.timeopen = @"";
  return self;
}
- (BOOL) hasTimeclose {
  return resultTestRoomInfo.hasTimeclose;
}
- (NSString*) timeclose {
  return resultTestRoomInfo.timeclose;
}
- (TestRoomInfoBuilder*) setTimeclose:(NSString*) value {
  resultTestRoomInfo.hasTimeclose = YES;
  resultTestRoomInfo.timeclose = value;
  return self;
}
- (TestRoomInfoBuilder*) clearTimeclose {
  resultTestRoomInfo.hasTimeclose = NO;
  resultTestRoomInfo.timeclose = @"";
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
